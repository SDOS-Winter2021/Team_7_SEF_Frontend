[{"/home/mittooji/Desktop/Frontend/Team_7_SEF_Frontend/src/index.js":"1","/home/mittooji/Desktop/Frontend/Team_7_SEF_Frontend/src/reportWebVitals.js":"2","/home/mittooji/Desktop/Frontend/Team_7_SEF_Frontend/src/App.js":"3","/home/mittooji/Desktop/Frontend/Team_7_SEF_Frontend/src/reducers/index.js":"4","/home/mittooji/Desktop/Frontend/Team_7_SEF_Frontend/src/components/Home/Home.jsx":"5","/home/mittooji/Desktop/Frontend/Team_7_SEF_Frontend/src/components/Auth/Auth.jsx":"6","/home/mittooji/Desktop/Frontend/Team_7_SEF_Frontend/src/components/NavBar/Navbar.jsx":"7","/home/mittooji/Desktop/Frontend/Team_7_SEF_Frontend/src/reducers/auth.js":"8","/home/mittooji/Desktop/Frontend/Team_7_SEF_Frontend/src/components/Auth/styles.js":"9","/home/mittooji/Desktop/Frontend/Team_7_SEF_Frontend/src/components/Auth/Icon.js":"10","/home/mittooji/Desktop/Frontend/Team_7_SEF_Frontend/src/components/NavBar/styles.js":"11","/home/mittooji/Desktop/Frontend/Team_7_SEF_Frontend/src/constants/actionTypes.js":"12","/home/mittooji/Desktop/Frontend/Team_7_SEF_Frontend/src/actions/auth.js":"13","/home/mittooji/Desktop/Frontend/Team_7_SEF_Frontend/src/api/index.js":"14","/home/mittooji/Desktop/Frontend/Team_7_SEF_Frontend/src/components/DonorList.js":"15","/home/mittooji/Desktop/Frontend/Team_7_SEF_Frontend/src/components/Form.js":"16","/home/mittooji/Desktop/Frontend/Team_7_SEF_Frontend/src/APIService.js":"17","/home/mittooji/Desktop/Frontend/Team_7_SEF_Frontend/src/components/Home/WithUser.js":"18","/home/mittooji/Desktop/Frontend/Team_7_SEF_Frontend/src/components/Home/WithoutUser.js":"19","/home/mittooji/Desktop/Frontend/Team_7_SEF_Frontend/src/components/Donor/Donor.jsx":"20","/home/mittooji/Desktop/Frontend/Team_7_SEF_Frontend/src/components/Donor/AddDonor.js":"21","/home/mittooji/Desktop/Frontend/Team_7_SEF_Frontend/src/components/Donor/EditDonor.js":"22","/home/mittooji/Desktop/Frontend/Team_7_SEF_Frontend/src/components/DonorList2.js":"23","/home/mittooji/Desktop/Frontend/Team_7_SEF_Frontend/src/components/DonorList4.js":"24","/home/mittooji/Desktop/Frontend/Team_7_SEF_Frontend/src/components/Transaction/Transaction.jsx":"25","/home/mittooji/Desktop/Frontend/Team_7_SEF_Frontend/src/components/Transaction Home/WithUserTransaction.js":"26","/home/mittooji/Desktop/Frontend/Team_7_SEF_Frontend/src/components/TransactionList.js":"27","/home/mittooji/Desktop/Frontend/Team_7_SEF_Frontend/src/components/Transaction/AddTransaction.js":"28","/home/mittooji/Desktop/Frontend/Team_7_SEF_Frontend/src/components/Transaction/EditTransaction.js":"29"},{"size":776,"mtime":1616077374050,"results":"30","hashOfConfig":"31"},{"size":362,"mtime":1611577315000,"results":"32","hashOfConfig":"31"},{"size":799,"mtime":1616775722783,"results":"33","hashOfConfig":"31"},{"size":111,"mtime":1611577315000,"results":"34","hashOfConfig":"31"},{"size":1700,"mtime":1616783870243,"results":"35","hashOfConfig":"31"},{"size":2903,"mtime":1616784106808,"results":"36","hashOfConfig":"31"},{"size":2255,"mtime":1616428608007,"results":"37","hashOfConfig":"31"},{"size":540,"mtime":1611577315000,"results":"38","hashOfConfig":"31"},{"size":618,"mtime":1611577315000,"results":"39","hashOfConfig":"31"},{"size":485,"mtime":1611577315000,"results":"40","hashOfConfig":"31"},{"size":304,"mtime":1616424272838,"results":"41","hashOfConfig":"31"},{"size":57,"mtime":1616428729141,"results":"42","hashOfConfig":"31"},{"size":550,"mtime":1615409555888,"results":"43","hashOfConfig":"31"},{"size":455,"mtime":1611577315000,"results":"44","hashOfConfig":"31"},{"size":4568,"mtime":1616428106640,"results":"45","hashOfConfig":"31"},{"size":11428,"mtime":1616419206530,"results":"46","hashOfConfig":"31"},{"size":2432,"mtime":1616781347463,"results":"47","hashOfConfig":"31"},{"size":2067,"mtime":1616776716886,"results":"48","hashOfConfig":"31"},{"size":304,"mtime":1616525634340,"results":"49","hashOfConfig":"31"},{"size":1133,"mtime":1616427024869,"results":"50","hashOfConfig":"31"},{"size":10980,"mtime":1616432057025,"results":"51","hashOfConfig":"31"},{"size":12331,"mtime":1616778554814,"results":"52","hashOfConfig":"31"},{"size":7721,"mtime":1616585962949,"results":"53","hashOfConfig":"31"},{"size":7906,"mtime":1616596724336,"results":"54","hashOfConfig":"31"},{"size":1283,"mtime":1616777703530,"results":"55","hashOfConfig":"31"},{"size":1985,"mtime":1616776890937,"results":"56","hashOfConfig":"31"},{"size":5257,"mtime":1616775687374,"results":"57","hashOfConfig":"31"},{"size":2958,"mtime":1616777465699,"results":"58","hashOfConfig":"31"},{"size":3428,"mtime":1616778467700,"results":"59","hashOfConfig":"31"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},"fk7i4s",{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"71","messages":"72","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"73","messages":"74","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"62"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"62"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"62"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"62"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"62"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"62"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"62"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"62"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"62"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"62"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"62"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"62"},"/home/mittooji/Desktop/Frontend/Team_7_SEF_Frontend/src/index.js",[],["131","132"],"/home/mittooji/Desktop/Frontend/Team_7_SEF_Frontend/src/reportWebVitals.js",[],"/home/mittooji/Desktop/Frontend/Team_7_SEF_Frontend/src/App.js",[],"/home/mittooji/Desktop/Frontend/Team_7_SEF_Frontend/src/reducers/index.js",[],"/home/mittooji/Desktop/Frontend/Team_7_SEF_Frontend/src/components/Home/Home.jsx",["133","134","135","136"],"/home/mittooji/Desktop/Frontend/Team_7_SEF_Frontend/src/components/Auth/Auth.jsx",["137","138","139","140"],"/home/mittooji/Desktop/Frontend/Team_7_SEF_Frontend/src/components/NavBar/Navbar.jsx",["141","142","143"],"import React, { useState, useEffect } from 'react'\nimport { Link, useHistory, useLocation } from 'react-router-dom'\nimport useStyles from './styles'\nimport MenuIcon from '@material-ui/icons/Menu'\nimport HomeTwoToneIcon from '@material-ui/icons/HomeTwoTone';\nimport { Avatar, Typography, IconButton, Toolbar, AppBar, Button } from '@material-ui/core'\nimport { useDispatch } from 'react-redux'\nimport { LOGOUT } from '../../constants/actionTypes'\n\nexport const Navbar = () => {\n    const classes = useStyles()\n    const dispatch = useDispatch()\n    const history = useHistory()\n    const location = useLocation()\n\n    const [user, setUser] = useState(JSON.parse(localStorage.getItem('profile')))\n    const userName = user?.result.name\n    const imgUrl = user?.result.imageUrl\n\n    const handleLogout = () => {\n        dispatch({ type: LOGOUT })\n        history.push('/auth')\n        setUser(null)\n    }\n\n    useEffect(() => {\n        const token = user?.token\n\n        setUser(JSON.parse(localStorage.getItem('profile')))\n    }, [location])\n\n    return (\n        <div className={classes.root}>\n            <AppBar position=\"static\">\n                <Toolbar>\n                    {/* <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\n                        <MenuIcon />\n                    </IconButton> */}\n                    <Typography component={Link} to='/' variant=\"h6\" className={classes.title}>\n                        <IconButton className={classes.logo} primary=\"white\" secondary=\"black\">\n                            <HomeTwoToneIcon />\n                        </IconButton>\n                    </Typography>\n                    {user\n                        ? <div>\n                            <Avatar ><img src={imgUrl} alt={userName} /></Avatar>\n                            <Typography variant='h6'>{userName}</Typography>\n                            <Button onClick={handleLogout} size='small' variant='contained' color='secondary'>Logout</Button>\n                        </div>\n                        : <Button component={Link} to='/auth' size='small' variant='contained' color='secondary'>Login</Button>\n                    }\n                </Toolbar>\n            </AppBar>\n        </div>\n    )\n}\n","/home/mittooji/Desktop/Frontend/Team_7_SEF_Frontend/src/reducers/auth.js",[],"/home/mittooji/Desktop/Frontend/Team_7_SEF_Frontend/src/components/Auth/styles.js",[],"/home/mittooji/Desktop/Frontend/Team_7_SEF_Frontend/src/components/Auth/Icon.js",[],"/home/mittooji/Desktop/Frontend/Team_7_SEF_Frontend/src/components/NavBar/styles.js",[],"/home/mittooji/Desktop/Frontend/Team_7_SEF_Frontend/src/constants/actionTypes.js",[],"/home/mittooji/Desktop/Frontend/Team_7_SEF_Frontend/src/actions/auth.js",[],"/home/mittooji/Desktop/Frontend/Team_7_SEF_Frontend/src/api/index.js",[],"/home/mittooji/Desktop/Frontend/Team_7_SEF_Frontend/src/components/DonorList.js",["144","145","146","147","148","149","150","151","152","153"],"import React from 'react';\nimport APIService from '../APIService';\n\n\nfunction DonorList(props) {\n\n    let headers = [\"Title\",\"Family_Name\",\"First_Name\",\"Current_Address\",\"Email\",\"Phone\",\"First_Donation_Date\",\"Recruitment_Source\",\"Number_of_Donations\",\"Last_Donation_Amount\",\"SEF_POC\"]\n    // let headers = [\"Title\",\"Family_Name\",\"First_Name\",\"Current_Address\",\"Email\",\"Phone\",\"Birth_Date\",\"First_Donation_Date\",\"Recruitment_Source\",\"Recruitment_Reason\",\"Number_of_Donations\",\"Cumulative_Donation_Amount\",\"Last_Donation_Amount\",\"Date_of_Last_Donation\",\"Preferred_Communication\",\"Date_of_Last_Communication\",\"Last_communication\",\"SEF_POC\",\"Notes\",\"Email_Communication_Rate\"]\n\n    const editBtn = (donor) => {\n        props.editBtn(donor)\n    }\n\n    return (\n        <div>            \n            <table id='donors'> \n               <tbody>\n                   <tr>{headers.map((key, index) => {\n                        return <th key={index}>{key.toUpperCase()}</th>\n                    })}</tr>\n                  {props.donors && props.donors.map((donor, index) => {\n                    const { id, Title, Family_Name,\n                        First_Name,\n                        Current_Address,\n                        Email,\n                        Phone,\n                        Birth_Date,\n                        First_Donation_Date,\n                        Recruitment_Source,\n                        Recruitment_Reason,\n                        Number_of_Donations,\n                        Cumulative_Donation_Amount,\n                        Last_Donation_Amount,\n                        Date_of_Last_Donation,\n                        Preferred_Communication,\n                        Date_of_Last_Communication,\n                        Last_communication,\n                        SEF_POC,\n                        Notes,\n                        Email_Communication_Rate } = donor //destructuring\n                    return (\n                        <tr key={id}>\n                            <td>{Title}</td>\n                            <td>{Family_Name}</td>\n                            <td>{First_Name}</td>\n                            <td>{Current_Address}</td>\n                            <td>{Email}</td>\n                            <td>{Phone}</td>\n                            {/* <td>{Birth_Date}</td> */}\n                            <td>{First_Donation_Date}</td>\n                            <td>{Recruitment_Source}</td>\n                            {/* <td>{Recruitment_Reason}</td> */}\n                            <td>{Number_of_Donations}</td>\n                            {/* <td>{Cumulative_Donation_Amount}</td> */}\n                            <td>{Last_Donation_Amount}</td>\n                            {/* <td>{Date_of_Last_Donation}</td> */}\n                            {/* <td>{Preferred_Communication}</td> */}\n                            {/* <td>{Date_of_Last_Communication}</td> */}\n                            {/* <td>{Last_communication}</td> */}\n                            <td>{SEF_POC}</td>\n                            {/* <td>{Notes}</td> */}\n                            {/* <td>{Email_Communication_Rate}</td> */}\n                            <td><button className = \"btn btn-primary\" onClick  = {() => editBtn(donor)}>Update</button></td>\n                        </tr>\n                    )\n                    })}\n               </tbody>\n            </table>\n\n            {/* {props.donors && props.donors.map(donor => {\n                return (\n                    <div key={donor.id}>\n                    <h2>{donor.First_Name}</h2>\n                    <p>First Donation Date: {donor.First_Donation_Date}</p>\n                    <p>Number of Donations: {donor.Number_of_Donations}</p>\n                    <p>Cumulative Donation Amount: {donor.Cumulative_Donation_Amount}</p>\n                    <p>Date of Last Donation: {donor.Date_of_Last_Donation}</p>\n                    <p>SEF POC: {donor.SEF_POC}</p>\n\n\n\n                    <div className = \"row\">\n                        <div className = \"col-md-1\">\n                            <button className = \"btn btn-primary\" onClick  = {() => editBtn(donor)}>Update</button>\n                        </div>\n                        <div className = \"col\">\n                            <button onClick = {() => deleteBtn(donor)} className = \"btn btn-danger\">Delete</button>\n                        </div>\n                    </div>\n                    <hr className=\"hrclass\"/>\n                    </div>\n                )\n            })} */}\n        </div>\n    )\n}\n\nexport default DonorList\n","/home/mittooji/Desktop/Frontend/Team_7_SEF_Frontend/src/components/Form.js",[],"/home/mittooji/Desktop/Frontend/Team_7_SEF_Frontend/src/APIService.js",[],"/home/mittooji/Desktop/Frontend/Team_7_SEF_Frontend/src/components/Home/WithUser.js",["154","155"],"import React,{useState,useEffect} from 'react'\nimport DonorList from '../DonorList';\nimport DonorList2 from '../DonorList2';\nimport DonorList4 from '../DonorList4';\nimport { useHistory } from 'react-router-dom';\nimport APIService from '../../APIService';\n\nfunction WithUser() {\n\n    // const fetchURL = 'http://127.0.0.1:8000/api/donor/';\n    // const getItems = () => fetch(fetchURL).then(res => res.json());\n    const getItems = () => APIService.GetDonor();\n    const [donors, setDonors] = useState([]);\n    const history = useHistory();\n\n    useEffect(() => {\n        getItems().then(data => setDonors(data));\n      }, []);\n\n    const editBtn = (donor) => {\n      localStorage.setItem('curr_donor',JSON.stringify(donor))\n      history.push('/donor');\n    }\n    \n    const donorForm = () => {\n      localStorage.setItem('curr_donor',null)\n      history.push('/donor');\n    }\n\n    const topFunction = () => {\n      document.body.scrollTop = 0;\n      document.documentElement.scrollTop = 0;\n      console.log('top button clicked')\n    }\n\n    const scrollFunction = () => {\n      if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {\n        mybutton.style.display = \"block\";\n      } else {\n        mybutton.style.display = \"none\";\n      }\n    }\n\n    var mybutton = document.getElementById(\"myBtn\");\n    window.onscroll = function() {scrollFunction()};\n\n    return (\n        <div className=\"App\">\n          <div className = \"row\">\n            <div className = \"col\">        \n              <br/> \n            </div>\n            <div className = \"col\">        \n              <br/> \n            </div>\n            <div className = \"col\">\n              <button onClick = {donorForm} className = \"btn btn-primary\">Add Donor</button>\n            </div>\n          </div>\n          <div className = \"row\">\n            <br/>\n          </div>\n            <DonorList4 donors = {donors} editBtn = {editBtn}/>\n          <div>\n            <button onClick={topFunction} id=\"myBtn\">Top</button>\n          </div>\n        </div>\n    )\n}\n\nexport default WithUser","/home/mittooji/Desktop/Frontend/Team_7_SEF_Frontend/src/components/Home/WithoutUser.js",[],"/home/mittooji/Desktop/Frontend/Team_7_SEF_Frontend/src/components/Donor/Donor.jsx",["156","157","158","159"],"import React, { useState, useEffect } from 'react'\nimport { useLocation } from 'react-router-dom'\nimport AddDonor from './AddDonor'\nimport EditDonor from './EditDonor'\nimport WithoutUser from '../Home/WithoutUser'\n\nexport const Donor = () => {\n    const location = useLocation()\n    const [user, setUser] = useState(JSON.parse(localStorage.getItem('profile')))\n    const [donor, setDonor] = useState(JSON.parse(localStorage.getItem('curr_donor')))\n    useEffect(() => {\n        const token = user?.token\n        const token2 = donor?.token\n        setUser(JSON.parse(localStorage.getItem('profile')))\n        setDonor(JSON.parse(localStorage.getItem('curr_donor')))\n    }, [location])\n  \n    return (\n        <div className=\"App\">\n          {user ? <DonorCheck donor = {donor} /> : <WithoutUser/>}\n        </div>\n    )\n  }\n\nconst DonorCheck = (props) => {\n    const [donor, setDonor] = useState(JSON.parse(localStorage.getItem('curr_donor')))\n    useEffect(() => {\n        setDonor(props.donor)\n    }, [])\n    return (\n        <div className=\"App\">\n          {donor ? <EditDonor donor={donor}/> : <AddDonor/> }\n        </div>\n    )\n}","/home/mittooji/Desktop/Frontend/Team_7_SEF_Frontend/src/components/Donor/AddDonor.js",["160","161","162","163","164","165","166","167","168","169","170","171","172","173","174","175","176","177","178","179"],"import React,{useState,useEffect} from 'react';\nimport { useHistory } from 'react-router-dom';\nimport APIService from '../../APIService';\n\nfunction AddDonor() {\n\n    return (\n        <div className=\"App\">\n            <Form/>\n        </div>\n    )\n}\n\nexport default AddDonor\n\n\nfunction Form() {\n    const history = useHistory()\n    const [Title, setTitle] = useState('')\n    const [Family_Name, setFamily_Name] = useState('')\n    const [First_Name, setFirst_Name] = useState('')\n    const [Current_Address, setCurrent_Address] = useState('')\n    const [Email, setEmail] = useState('')\n    const [Phone, setPhone] = useState('')\n    const [Birth_Date, setBirth_Date] = useState('')\n    const [First_Donation_Date, setFirst_Donation_Date] = useState('')\n    const [Recruitment_Source, setRecruitment_Source] = useState('')\n    const [Recruitment_Reason, setRecruitment_Reason] = useState('')\n    const [Number_of_Donations, setNumber_of_Donations] = useState('')\n    const [Cumulative_Donation_Amount, setCumulative_Donation_Amount] = useState('')\n    const [Last_Donation_Amount, setLast_Donation_Amount] = useState('')\n    const [Date_of_Last_Donation, setDate_of_Last_Donation] = useState('')\n    const [Preferred_Communication, setPreferred_Communication] = useState('')\n    const [Date_of_Last_Communication, setDate_of_Last_Communication] = useState('')\n    const [Last_communication, setLast_communication] = useState('')\n    const [SEF_POC, setSEF_POC] = useState('')\n    const [Notes, setNotes] = useState('')\n    const [Email_Communication_Rate, setEmail_Communication_Rate] = useState('')\n    // const history = useHistory()\n\n    useEffect(() => {\n        setTitle('')\n        setFamily_Name('')\n        setFirst_Name('')\n        setCurrent_Address('')\n        setEmail('')\n        setPhone('')\n        setBirth_Date('')\n        setFirst_Donation_Date('')\n        setRecruitment_Source('')\n        setRecruitment_Reason('')\n        setNumber_of_Donations('')\n        setCumulative_Donation_Amount('')\n        setLast_Donation_Amount('')\n        setDate_of_Last_Donation('')\n        setPreferred_Communication('')\n        setDate_of_Last_Communication('')\n        setLast_communication('')\n        setSEF_POC('')\n        setNotes('')\n        setEmail_Communication_Rate('')\n    }, [])\n\n    const addDonor = () => {\n        APIService.AddDonor({\n            Title,\n            Family_Name,\n            First_Name,\n            Current_Address,\n            Email,\n            Phone,\n            Birth_Date,\n            First_Donation_Date,\n            Recruitment_Source,\n            Recruitment_Reason,\n            Number_of_Donations,\n            Cumulative_Donation_Amount,\n            Last_Donation_Amount,\n            Date_of_Last_Donation,\n            Preferred_Communication,\n            Date_of_Last_Communication,\n            Last_communication,\n            SEF_POC,\n            Notes,\n            Email_Communication_Rate\n        })\n        .then(resp => {\n            if (check(resp)) {\n                alert(\"New Donor Added\")\n                history.push('/')\n            }\n            else{\n                alert(\"Error in Input\")\n            }\n        }\n        )\n        \n    }\n\n    return (\n        <div className=\"mb-3\">\n            <label htmlFor='Title' className='form-label'>Title</label>\n            <input type=\"text\" className='form-control' id='Title' placeholder = \"Please Enter the Title\"\n            value={Title} onChange={e => setTitle(e.target.value)}/>\n\n\n            <label htmlFor='Family_Name' className='form-label'>Family Name</label>\n            <input type=\"text\" className='form-control' id='Family_Name' placeholder = \"Please Enter the Family Name\"\n            value={Family_Name} onChange={e => setFamily_Name(e.target.value)}/>\n\n\n            <label htmlFor='First_Name' className='form-label'>First Name</label>\n            <input type=\"text\" className='form-control' id='First_Name' placeholder = \"Please Enter the First Name\"\n            value={First_Name} onChange={e => setFirst_Name(e.target.value)}/>\n\n\n            <label htmlFor='Current_Address' className='form-label'>Current Address</label>\n            <input type=\"text\" className='form-control' id='Current_Address' placeholder = \"Please Enter the Current Address\"\n            value={Current_Address} onChange={e => setCurrent_Address(e.target.value)}/>\n\n\n            <label htmlFor='Email' className='form-label'>Email</label>\n            <input type=\"text\" className='form-control' id='Email' placeholder = \"Please Enter the Email\"\n            value={Email} onChange={e => setEmail(e.target.value)}/>\n\n\n            <label htmlFor='Phone' className='form-label'>Phone</label>\n            <input type=\"text\" className='form-control' id='Phone' placeholder = \"Please Enter the Phone\"\n            value={Phone} onChange={e => setPhone(e.target.value)}/>\n\n\n            <label htmlFor='Birth_Date' className='form-label'>Birth Date</label>\n            <input type=\"text\" className='form-control' id='Birth_Date' placeholder = \"Please Enter the Birth Date\"\n            value={Birth_Date} onChange={e => setBirth_Date(e.target.value)}/>\n\n\n            <label htmlFor='First_Donation_Date' className='form-label'>First Donation Date</label>\n            <input type=\"text\" className='form-control' id='First_Donation_Date' placeholder = \"Please Enter the First Donation Date\"\n            value={First_Donation_Date} onChange={e => setFirst_Donation_Date(e.target.value)}/>\n\n\n            <label htmlFor='Recruitment_Source' className='form-label'>Recruitment Source</label>\n            <input type=\"text\" className='form-control' id='Recruitment_Source' placeholder = \"Please Enter the Recruitment Source\"\n            value={Recruitment_Source} onChange={e => setRecruitment_Source(e.target.value)}/>\n\n\n            <label htmlFor='Recruitment_Reason' className='form-label'>Recruitment Reason</label>\n            <input type=\"text\" className='form-control' id='Recruitment_Reason' placeholder = \"Please Enter the Recruitment Reason\"\n            value={Recruitment_Reason} onChange={e => setRecruitment_Reason(e.target.value)}/>\n\n\n            <label htmlFor='Number_of_Donations' className='form-label'>Number of Donations</label>\n            <input type=\"text\" className='form-control' id='Number_of_Donations' placeholder = \"Please Enter the Number of Donations\"\n            value={Number_of_Donations} onChange={e => setNumber_of_Donations(e.target.value)}/>\n\n\n            <label htmlFor='Cumulative_Donation_Amount' className='form-label'>Cumulative Donation Amount</label>\n            <input type=\"text\" className='form-control' id='Cumulative_Donation_Amount' placeholder = \"Please Enter the Cumulative Donation Amount\"\n            value={Cumulative_Donation_Amount} onChange={e => setCumulative_Donation_Amount(e.target.value)}/>\n\n\n            <label htmlFor='Last_Donation_Amount' className='form-label'>Last Donation Amount</label>\n            <input type=\"text\" className='form-control' id='Last_Donation_Amount' placeholder = \"Please Enter the Last Donation Amount\"\n            value={Last_Donation_Amount} onChange={e => setLast_Donation_Amount(e.target.value)}/>\n\n\n            <label htmlFor='Date_of_Last_Donation' className='form-label'>Date of Last Donation</label>\n            <input type=\"text\" className='form-control' id='Date_of_Last_Donation' placeholder = \"Please Enter the Date of Last Donation\"\n            value={Date_of_Last_Donation} onChange={e => setDate_of_Last_Donation(e.target.value)}/>\n\n\n            <label htmlFor='Preferred_Communication' className='form-label'>Preferred Communication</label>\n            <input type=\"text\" className='form-control' id='Preferred_Communication' placeholder = \"Please Enter the Preferred Communication\"\n            value={Preferred_Communication} onChange={e => setPreferred_Communication(e.target.value)}/>\n\n\n            <label htmlFor='Date_of_Last_Communication' className='form-label'>Date of Last Communication</label>\n            <input type=\"text\" className='form-control' id='Date_of_Last_Communication' placeholder = \"Please Enter the Date of Last Communication\"\n            value={Date_of_Last_Communication} onChange={e => setDate_of_Last_Communication(e.target.value)}/>\n\n\n            <label htmlFor='Last_communication' className='form-label'>Last communication</label>\n            <input type=\"text\" className='form-control' id='Last_communication' placeholder = \"Please Enter the Last communication\"\n            value={Last_communication} onChange={e => setLast_communication(e.target.value)}/>\n\n\n            <label htmlFor='SEF_POC' className='form-label'>SEF POC</label>\n            <input type=\"text\" className='form-control' id='SEF_POC' placeholder = \"Please Enter the SEF POC\"\n            value={SEF_POC} onChange={e => setSEF_POC(e.target.value)}/>\n\n\n            <label htmlFor='Notes' className='form-label'>Notes</label>\n            <input type=\"text\" className='form-control' id='Notes' placeholder = \"Please Enter the Notes\"\n            value={Notes} onChange={e => setNotes(e.target.value)}/>\n\n\n            <label htmlFor='Email_Communication_Rate' className='form-label'>Email Communication Rate</label>\n            <input type=\"text\" className='form-control' id='Email_Communication_Rate' placeholder = \"Please Enter the Email Communication Rate\"\n            value={Email_Communication_Rate} onChange={e => setEmail_Communication_Rate(e.target.value)}/>\n\n            <br/>\n            <button onClick={addDonor} className=\"btn btn-success\">Add Donor</button>\n        </div>\n    )\n}\n\nfunction check(resp){\n    if (resp.Birth_Date == \"Date has wrong format. Use one of these formats instead: YYYY-MM-DD.\" || resp.Cumulative_Donation_Amount == \"A valid integer is required.\" || resp.Current_Address == \"This field may not be blank.\" || resp.Date_of_Last_Communication == \"Date has wrong format. Use one of these formats instead: YYYY-MM-DD.\" || resp.Date_of_Last_Donation == \"Date has wrong format. Use one of these formats instead: YYYY-MM-DD.\" || resp.Email == \"This field may not be blank.\" || resp.Email_Communication_Rate == \"A valid integer is required.\" || resp.Family_Name == \"This field may not be blank.\" || resp.First_Donation_Date == \"Date has wrong format. Use one of these formats instead: YYYY-MM-DD.\" || resp.First_Name == \"This field may not be blank.\" || resp.Last_Donation_Amount == \"This field may not be blank.\" || resp.Last_communication == \"This field may not be blank.\" || resp.Notes == \"This field may not be blank.\" || resp.Number_of_Donations == \"A valid integer is required.\" || resp.Phone == \"A valid integer is required.\" || resp.Preferred_Communication == \"This field may not be blank.\" || resp.Recruitment_Reason == \"This field may not be blank.\" || resp.Recruitment_Source == \"This field may not be blank.\" || resp.SEF_POC == \"This field may not be blank.\" || resp.Title == \"This field may not be blank.\") {\n        return false;\n    }\n    return true;\n}","/home/mittooji/Desktop/Frontend/Team_7_SEF_Frontend/src/components/Donor/EditDonor.js",["180","181"],"import React,{useState,useEffect} from 'react';\nimport { useHistory } from 'react-router-dom';\nimport APIService from '../../APIService';\n\nfunction EditDonor(props) {\n\n    return (\n        <div className=\"App\">\n            <Form donor = {props.donor}/>\n        </div>\n    )\n}\n\nexport default EditDonor\n\n\nfunction Form(props) {\n    const history = useHistory()\n    const [Title, setTitle] = useState('')\n    const [Family_Name, setFamily_Name] = useState('')\n    const [First_Name, setFirst_Name] = useState('')\n    const [Current_Address, setCurrent_Address] = useState('')\n    const [Email, setEmail] = useState('')\n    const [Phone, setPhone] = useState('')\n    const [Birth_Date, setBirth_Date] = useState('')\n    const [First_Donation_Date, setFirst_Donation_Date] = useState('')\n    const [Recruitment_Source, setRecruitment_Source] = useState('')\n    const [Recruitment_Reason, setRecruitment_Reason] = useState('')\n    const [Number_of_Donations, setNumber_of_Donations] = useState('')\n    const [Cumulative_Donation_Amount, setCumulative_Donation_Amount] = useState('')\n    const [Last_Donation_Amount, setLast_Donation_Amount] = useState('')\n    const [Date_of_Last_Donation, setDate_of_Last_Donation] = useState('')\n    const [Preferred_Communication, setPreferred_Communication] = useState('')\n    const [Date_of_Last_Communication, setDate_of_Last_Communication] = useState('')\n    const [Last_communication, setLast_communication] = useState('')\n    const [SEF_POC, setSEF_POC] = useState('')\n    const [Notes, setNotes] = useState('')\n    const [Email_Communication_Rate, setEmail_Communication_Rate] = useState('')\n    console.log(props.donor)\n    // const history = useHistory()\n\n    useEffect(() => {\n        setTitle(props.donor.Title)\n        setFamily_Name(props.donor.Family_Name)\n        setFirst_Name(props.donor.First_Name)\n        setCurrent_Address(props.donor.Current_Address)\n        setEmail(props.donor.Email)\n        setPhone(props.donor.Phone)\n        setBirth_Date(props.donor.Birth_Date)\n        setFirst_Donation_Date(props.donor.First_Donation_Date)\n        setRecruitment_Source(props.donor.Recruitment_Source)\n        setRecruitment_Reason(props.donor.Recruitment_Reason)\n        setNumber_of_Donations(props.donor.Number_of_Donations)\n        setCumulative_Donation_Amount(props.donor.Cumulative_Donation_Amount)\n        setLast_Donation_Amount(props.donor.Last_Donation_Amount)\n        setDate_of_Last_Donation(props.donor.Date_of_Last_Donation)\n        setPreferred_Communication(props.donor.Preferred_Communication)\n        setDate_of_Last_Communication(props.donor.Date_of_Last_Communication)\n        setLast_communication(props.donor.Last_communication)\n        setSEF_POC(props.donor.SEF_POC)\n        setNotes(props.donor.Notes)\n        setEmail_Communication_Rate(props.donor.Email_Communication_Rate)\n    }, [props.donor])\n\n    // const addDonor = () => {\n    //     if (check(Title) && check(Family_Name) && check(First_Name) && check(Current_Address) && check(Email) && check(Phone) && check(Birth_Date) && check(First_Donation_Date) && check(Recruitment_Source) && check(Recruitment_Reason) && check(Number_of_Donations) && check(Cumulative_Donation_Amount) && check(Last_Donation_Amount) && check(Date_of_Last_Donation) && check(Last_communication) && check(SEF_POC) && check(Notes) && check(Email_Communication_Rate)) {\n    //         APIService.AddDonor({\n    //             Title,\n    //             Family_Name,\n    //             First_Name,\n    //             Current_Address,\n    //             Email,\n    //             Phone,\n    //             Birth_Date,\n    //             First_Donation_Date,\n    //             Recruitment_Source,\n    //             Recruitment_Reason,\n    //             Number_of_Donations,\n    //             Cumulative_Donation_Amount,\n    //             Last_Donation_Amount,\n    //             Date_of_Last_Donation,\n    //             Preferred_Communication,\n    //             Date_of_Last_Communication,\n    //             Last_communication,\n    //             SEF_POC,\n    //             Notes,\n    //             Email_Communication_Rate\n    //         })\n    //         alert(\"New Donor Added\");\n    //         history.push('/');\n    //     }\n    //     else{\n    //         alert(\"Error in Input\")\n    //     }\n        \n    // }\n\n    const updateDonor = () => {\n        APIService.UpdateDonor(props.donor.id, {\n            Title,\n            Family_Name,\n            First_Name,\n            Current_Address,\n            Email,\n            Phone,\n            Birth_Date,\n            First_Donation_Date,\n            Recruitment_Source,\n            Recruitment_Reason,\n            Number_of_Donations,\n            Cumulative_Donation_Amount,\n            Last_Donation_Amount,\n            Date_of_Last_Donation,\n            Preferred_Communication,\n            Date_of_Last_Communication,\n            Last_communication,\n            SEF_POC,\n            Notes,\n            Email_Communication_Rate\n        })\n        alert(\"Donor Entry Updated\");\n        history.push('/');\n    }\n\n    const deleteBtn = () => {\n        var donor_check = prompt(\"Please enter the First_Name of the Donor:\", props.donor.First_Name);\n        if (donor_check == null || donor_check !=props.donor.First_Name || donor_check == \"\") {\n            alert(\"Try Again, Donor Name miss match\")\n        } \n        else {\n            APIService.DeleteDonor(props.donor.id)\n            .catch(error => console.log(error))\n            alert(\"Donor Entry Deleted\");\n            history.push('/');\n        }\n        }\n\n    return (\n        <div className=\"mb-3\">\n            <label htmlFor='Title' className='form-label'>Title</label>\n            <input type=\"text\" className='form-control' id='Title' placeholder = \"Please Enter the Title\"\n            value={Title} onChange={e => setTitle(e.target.value)}/>\n\n\n            <label htmlFor='Family_Name' className='form-label'>Family Name</label>\n            <input type=\"text\" className='form-control' id='Family_Name' placeholder = \"Please Enter the Family Name\"\n            value={Family_Name} onChange={e => setFamily_Name(e.target.value)}/>\n\n\n            <label htmlFor='First_Name' className='form-label'>First Name</label>\n            <input type=\"text\" className='form-control' id='First_Name' placeholder = \"Please Enter the First Name\"\n            value={First_Name} onChange={e => setFirst_Name(e.target.value)}/>\n\n\n            <label htmlFor='Current_Address' className='form-label'>Current Address</label>\n            <input type=\"text\" className='form-control' id='Current_Address' placeholder = \"Please Enter the Current Address\"\n            value={Current_Address} onChange={e => setCurrent_Address(e.target.value)}/>\n\n\n            <label htmlFor='Email' className='form-label'>Email</label>\n            <input type=\"text\" className='form-control' id='Email' placeholder = \"Please Enter the Email\"\n            value={Email} onChange={e => setEmail(e.target.value)}/>\n\n\n            <label htmlFor='Phone' className='form-label'>Phone</label>\n            <input type=\"text\" className='form-control' id='Phone' placeholder = \"Please Enter the Phone\"\n            value={Phone} onChange={e => setPhone(e.target.value)}/>\n\n\n            <label htmlFor='Birth_Date' className='form-label'>Birth Date</label>\n            <input type=\"text\" className='form-control' id='Birth_Date' placeholder = \"Please Enter the Birth Date\"\n            value={Birth_Date} onChange={e => setBirth_Date(e.target.value)}/>\n\n\n            <label htmlFor='First_Donation_Date' className='form-label'>First Donation Date</label>\n            <input type=\"text\" className='form-control' id='First_Donation_Date' placeholder = \"Please Enter the First Donation Date\"\n            value={First_Donation_Date} onChange={e => setFirst_Donation_Date(e.target.value)}/>\n\n\n            <label htmlFor='Recruitment_Source' className='form-label'>Recruitment Source</label>\n            <input type=\"text\" className='form-control' id='Recruitment_Source' placeholder = \"Please Enter the Recruitment Source\"\n            value={Recruitment_Source} onChange={e => setRecruitment_Source(e.target.value)}/>\n\n\n            <label htmlFor='Recruitment_Reason' className='form-label'>Recruitment Reason</label>\n            <input type=\"text\" className='form-control' id='Recruitment_Reason' placeholder = \"Please Enter the Recruitment Reason\"\n            value={Recruitment_Reason} onChange={e => setRecruitment_Reason(e.target.value)}/>\n\n\n            <label htmlFor='Number_of_Donations' className='form-label'>Number of Donations</label>\n            <input type=\"text\" className='form-control' id='Number_of_Donations' placeholder = \"Please Enter the Number of Donations\"\n            value={Number_of_Donations} onChange={e => setNumber_of_Donations(e.target.value)}/>\n\n\n            <label htmlFor='Cumulative_Donation_Amount' className='form-label'>Cumulative Donation Amount</label>\n            <input type=\"text\" className='form-control' id='Cumulative_Donation_Amount' placeholder = \"Please Enter the Cumulative Donation Amount\"\n            value={Cumulative_Donation_Amount} onChange={e => setCumulative_Donation_Amount(e.target.value)}/>\n\n\n            <label htmlFor='Last_Donation_Amount' className='form-label'>Last Donation Amount</label>\n            <input type=\"text\" className='form-control' id='Last_Donation_Amount' placeholder = \"Please Enter the Last Donation Amount\"\n            value={Last_Donation_Amount} onChange={e => setLast_Donation_Amount(e.target.value)}/>\n\n\n            <label htmlFor='Date_of_Last_Donation' className='form-label'>Date of Last Donation</label>\n            <input type=\"text\" className='form-control' id='Date_of_Last_Donation' placeholder = \"Please Enter the Date of Last Donation\"\n            value={Date_of_Last_Donation} onChange={e => setDate_of_Last_Donation(e.target.value)}/>\n\n\n            <label htmlFor='Preferred_Communication' className='form-label'>Preferred Communication</label>\n            <input type=\"text\" className='form-control' id='Preferred_Communication' placeholder = \"Please Enter the Preferred Communication\"\n            value={Preferred_Communication} onChange={e => setPreferred_Communication(e.target.value)}/>\n\n\n            <label htmlFor='Date_of_Last_Communication' className='form-label'>Date of Last Communication</label>\n            <input type=\"text\" className='form-control' id='Date_of_Last_Communication' placeholder = \"Please Enter the Date of Last Communication\"\n            value={Date_of_Last_Communication} onChange={e => setDate_of_Last_Communication(e.target.value)}/>\n\n\n            <label htmlFor='Last_communication' className='form-label'>Last communication</label>\n            <input type=\"text\" className='form-control' id='Last_communication' placeholder = \"Please Enter the Last communication\"\n            value={Last_communication} onChange={e => setLast_communication(e.target.value)}/>\n\n\n            <label htmlFor='SEF_POC' className='form-label'>SEF POC</label>\n            <input type=\"text\" className='form-control' id='SEF_POC' placeholder = \"Please Enter the SEF POC\"\n            value={SEF_POC} onChange={e => setSEF_POC(e.target.value)}/>\n\n\n            <label htmlFor='Notes' className='form-label'>Notes</label>\n            <input type=\"text\" className='form-control' id='Notes' placeholder = \"Please Enter the Notes\"\n            value={Notes} onChange={e => setNotes(e.target.value)}/>\n\n\n            <label htmlFor='Email_Communication_Rate' className='form-label'>Email Communication Rate</label>\n            <input type=\"text\" className='form-control' id='Email_Communication_Rate' placeholder = \"Please Enter the Email Communication Rate\"\n            value={Email_Communication_Rate} onChange={e => setEmail_Communication_Rate(e.target.value)}/>\n\n            <br/>\n\n            <div className = \"row\">   \n                <button onClick={updateDonor} className=\"btn btn-success\">Update Donor</button>\n            <div className = \"col\">\n                <br/>\n            </div>\n                <button onClick = {deleteBtn} className = \"btn btn-danger\">Delete</button>\n          </div>\n        </div>\n    )\n}\n\n// function check(data){\n//     if (data == null){\n//         console.log(data)\n//         return true;\n//     }\n//     return false;\n// }","/home/mittooji/Desktop/Frontend/Team_7_SEF_Frontend/src/components/DonorList2.js",["182"],"import React from \"react\";\nimport { useTable, useFilters, useGlobalFilter, useAsyncDebounce } from 'react-table'\n// import 'bootstrap/dist/css/bootstrap.min.css';\nimport './Donors.css';\n\n\n// Define a default UI for filtering\nfunction GlobalFilter({\n    preGlobalFilteredRows,\n    globalFilter,\n    setGlobalFilter,\n}) {\n    const count = preGlobalFilteredRows.length\n    const [value, setValue] = React.useState(globalFilter)\n    const onChange = useAsyncDebounce(value => {\n        setGlobalFilter(value || undefined)\n    }, 200)\n\n    return (\n        <span>\n            Search:{' '}\n            <input\n                className=\"form-control\"\n                value={value || \"\"}\n                onChange={e => {\n                    setValue(e.target.value);\n                    onChange(e.target.value);\n                }}\n                placeholder={`${count} records...`}\n            />\n        </span>\n    )\n}\n\nfunction DefaultColumnFilter({\n    column: { filterValue, preFilteredRows, setFilter },\n}) {\n    const count = preFilteredRows.length\n\n    return (\n        <input\n            className=\"form-control\"\n            value={filterValue || ''}\n            onChange={e => {\n                setFilter(e.target.value || undefined)\n            }}\n            placeholder={`Search`}\n        />\n    )\n}\n\nfunction Table({ columns, data }) {\n\n    const defaultColumn = React.useMemo(\n        () => ({\n            // Default Filter UI\n            Filter: DefaultColumnFilter,\n        }),\n        []\n    )\n\n    const {\n        getTableProps,\n        getTableBodyProps,\n        headerGroups,\n        rows,\n        prepareRow,\n        state,\n        preGlobalFilteredRows,\n        setGlobalFilter,\n    } = useTable(\n        {\n            columns,\n            data,\n            defaultColumn\n        },\n        useFilters,\n        useGlobalFilter\n    )\n\n    return (\n        <div>\n            <GlobalFilter\n                preGlobalFilteredRows={preGlobalFilteredRows}\n                globalFilter={state.globalFilter}\n                setGlobalFilter={setGlobalFilter}\n            />\n            <br/>\n            <br/>\n            <table className=\"table table-dark\" {...getTableProps()}>\n                <thead>\n                    {headerGroups.map(headerGroup => (\n                        <tr {...headerGroup.getHeaderGroupProps()}>\n                            {headerGroup.headers.map(column => (\n                                <th {...column.getHeaderProps()}>\n                                    {column.render('Header')}\n                                    {/* Render the columns filter UI */}\n                                    <div>{column.canFilter ? column.render('Filter') : null}</div>\n                                </th>\n                            ))}\n                        </tr>\n                    ))}\n                </thead>\n                <tbody {...getTableBodyProps()}>\n                    {rows.map((row, i) => {\n                        prepareRow(row)\n                        return (\n                            <tr {...row.getRowProps()}>\n                                {row.cells.map(cell => {\n                                    return <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\n                                })}\n                            </tr>\n                        )\n                    })}\n                </tbody>\n            </table>\n            <br />\n            <div>Showing the first 20 results of {rows.length} rows</div>\n            {/* <div>\n                <pre className=\"temp\">\n                    <code>{JSON.stringify(state.filters, null, 2)}</code>\n                </pre>\n            </div> */}\n        </div>\n    )\n}\n\n\n\nfunction DonorList2(props) {\n\n    const donors = props.donors;\n\n    const editBtn = (donor) => {\n        props.editBtn(donor)\n    }\n\n    const newData = [];\n    donors.forEach(donor => {\n        newData.push({\n            Title: donor.Title,\n            Family_Name: donor.Family_Name,\n            First_Name: donor.First_Name,\n            Current_Address: donor.Current_Address,\n            Email: donor.Email,\n            Phone: donor.Phone,\n            Birth_Date: donor.Birth_Date,\n            First_Donation_Date: donor.First_Donation_Date,\n            Recruitment_Source: donor.Recruitment_Source,\n            Recruitment_Reason: donor.Recruitment_Reason,\n            Number_of_Donations: donor.Number_of_Donations,\n            Cumulative_Donation_Amount: donor.Cumulative_Donation_Amount,\n            Last_Donation_Amount: donor.Last_Donation_Amount,\n            Date_of_Last_Donation: donor.Date_of_Last_Donation,\n            Preferred_Communication: donor.Preferred_Communication,\n            Date_of_Last_Communication: donor.Date_of_Last_Communication,\n            Last_communication: donor.Last_communication,\n            SEF_POC: donor.SEF_POC,\n            Notes: donor.Notes,\n            Email_Communication_Rate: donor.Email_Communication_Rate,\n            Update_Donor: editBtn\n        });\n    });\n\n    const columns = React.useMemo(\n        () => [\n            {\n                Header: 'Title',\n                accessor: 'Title',\n            },\n            {\n                Header: 'Family Name',\n                accessor: 'Family_Name',\n            },\n            {\n                Header: 'First Name',\n                accessor: 'First_Name',\n            },\n            {\n                Header: 'Current Address',\n                accessor: 'Current_Address',\n            },\n            {\n                Header: 'Email',\n                accessor: 'Email',\n            },\n            {\n                Header: 'Phone',\n                accessor: 'Phone',\n            },\n            {\n                Header: 'Birth Date',\n                accessor: 'Birth_Date',\n            },\n            {\n                Header: 'First Donation Date',\n                accessor: 'First_Donation_Date',\n            },\n            {\n                Header: 'Recruitment Source',\n                accessor: 'Recruitment_Source',\n            },\n            {\n                Header: 'Recruitment Reason',\n                accessor: 'Recruitment_Reason',\n            },\n            {\n                Header: 'Number of Donations',\n                accessor: 'Number_of_Donations',\n            },\n            {\n                Header: 'Cumulative Donation Amount',\n                accessor: 'Cumulative_Donation_Amount',\n            },\n            {\n                Header: 'Last Donation Amount',\n                accessor: 'Last_Donation_Amount',\n            },\n            {\n                Header: 'Date of Last Donation',\n                accessor: 'Date_of_Last_Donation',\n            },\n            {\n                Header: 'Preferred Communication',\n                accessor: 'Preferred_Communication',\n            },\n            {\n                Header: 'Date of Last Communication',\n                accessor: 'Date_of_Last_Communication',\n            },\n            {\n                Header: 'Last communication',\n                accessor: 'Last_communication',\n            },\n            {\n                Header: 'SEF POC',\n                accessor: 'SEF_POC',\n            },\n            {\n                Header: 'Notes',\n                accessor: 'Notes',\n            },\n            {\n                Header: 'Email Communication Rate',\n                accessor: 'Email_Communication_Rate',\n            },\n            {\n                Header: 'Update_Donor',\n                accessor: 'Update_Donor',\n            },\n        ],\n        []\n    )\n\n    const data = newData\n\n    return (\n        <div className=\"Donors\">  \n        <Table columns={columns} data={data} />\n        </div>\n    )\n}\n\nexport default DonorList2;","/home/mittooji/Desktop/Frontend/Team_7_SEF_Frontend/src/components/DonorList4.js",["183"],"import React from \"react\";\nimport { useTable, useFilters, useGlobalFilter, useAsyncDebounce } from 'react-table'\n// import 'bootstrap/dist/css/bootstrap.min.css';\nimport './Donors.css';\n\n\n// Define a default UI for filtering\nfunction GlobalFilter({\n    preGlobalFilteredRows,\n    globalFilter,\n    setGlobalFilter,\n}) {\n    const count = preGlobalFilteredRows.length\n    const [value, setValue] = React.useState(globalFilter)\n    const onChange = useAsyncDebounce(value => {\n        setGlobalFilter(value || undefined)\n    }, 200)\n\n    return (\n        <span>\n            Search:{' '}\n            <input\n                className=\"form-control\"\n                value={value || \"\"}\n                onChange={e => {\n                    setValue(e.target.value);\n                    onChange(e.target.value);\n                }}\n                placeholder={`${count} records...`}\n            />\n        </span>\n    )\n}\n\nfunction DefaultColumnFilter({\n    column: { filterValue, preFilteredRows, setFilter },\n}) {\n    const count = preFilteredRows.length\n\n    return (\n        <input\n            className=\"form-control\"\n            value={filterValue || ''}\n            onChange={e => {\n                setFilter(e.target.value || undefined)\n            }}\n            placeholder={`Search`}\n        />\n    )\n}\n\nfunction Table({ columns, data }) {\n\n    const defaultColumn = React.useMemo(\n        () => ({\n            // Default Filter UI\n            Filter: DefaultColumnFilter,\n        }),\n        []\n    )\n\n    const {\n        getTableProps,\n        getTableBodyProps,\n        headerGroups,\n        rows,\n        prepareRow,\n        state,\n        preGlobalFilteredRows,\n        setGlobalFilter,\n    } = useTable(\n        {\n            columns,\n            data,\n            defaultColumn\n        },\n        useFilters,\n        useGlobalFilter\n    )\n\n    return (\n        <div>\n            <GlobalFilter\n                preGlobalFilteredRows={preGlobalFilteredRows}\n                globalFilter={state.globalFilter}\n                setGlobalFilter={setGlobalFilter}\n            />\n            <br/>\n            <br/>\n            <table className=\"table table-dark\" {...getTableProps()}>\n                <thead>\n                    {headerGroups.map(headerGroup => (\n                        <tr {...headerGroup.getHeaderGroupProps()}>\n                            {headerGroup.headers.map(column => (\n                                <th {...column.getHeaderProps()}>\n                                    {column.render('Header')}\n                                    {/* Render the columns filter UI */}\n                                    <div>{column.canFilter ? column.render('Filter') : null}</div>\n                                </th>\n                            ))}\n                        </tr>\n                    ))}\n                </thead>\n                <tbody {...getTableBodyProps()}>\n                    {rows.map((row, i) => {\n                        prepareRow(row)\n                        return (\n                            <tr {...row.getRowProps()}>\n                                {row.cells.map(cell => {\n                                    return <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\n                                })}\n                            </tr>\n                        )\n                    })}\n                </tbody>\n            </table>\n            <br />\n            <div>Showing the first 20 results of {rows.length} rows</div>\n            {/* <div>\n                <pre className=\"temp\">\n                    <code>{JSON.stringify(state.filters, null, 2)}</code>\n                </pre>\n            </div> */}\n        </div>\n    )\n}\n\nfunction editBtn(props,donor) {\n\n    const editDonorBtn = (donor) => {\n        props.editBtn(donor)\n    }\n\n\n    return <button className = \"btn btn-primary\" onClick  = {() => editDonorBtn(donor)}>Update</button>\n}\n\n\n\nfunction DonorList4(props) {\n\n    const donors = props.donors;\n\n    const newData = [];\n    donors.forEach(donor => {\n        newData.push({\n            Title: donor.Title,\n            Family_Name: donor.Family_Name,\n            First_Name: donor.First_Name,\n            Current_Address: donor.Current_Address,\n            Email: donor.Email,\n            Phone: donor.Phone,\n            Birth_Date: donor.Birth_Date,\n            First_Donation_Date: donor.First_Donation_Date,\n            Recruitment_Source: donor.Recruitment_Source,\n            Recruitment_Reason: donor.Recruitment_Reason,\n            Number_of_Donations: donor.Number_of_Donations,\n            Cumulative_Donation_Amount: donor.Cumulative_Donation_Amount,\n            Last_Donation_Amount: donor.Last_Donation_Amount,\n            Date_of_Last_Donation: donor.Date_of_Last_Donation,\n            Preferred_Communication: donor.Preferred_Communication,\n            Date_of_Last_Communication: donor.Date_of_Last_Communication,\n            Last_communication: donor.Last_communication,\n            SEF_POC: donor.SEF_POC,\n            Notes: donor.Notes,\n            Email_Communication_Rate: donor.Email_Communication_Rate,\n            Update_Donor: editBtn(props,donor)\n        });\n    });\n\n    const columns = React.useMemo(\n        () => [\n            {\n                Header: 'Title',\n                accessor: 'Title',\n            },\n            {\n                Header: 'Family Name',\n                accessor: 'Family_Name',\n            },\n            {\n                Header: 'First Name',\n                accessor: 'First_Name',\n            },\n            {\n                Header: 'Current Address',\n                accessor: 'Current_Address',\n            },\n            {\n                Header: 'Email',\n                accessor: 'Email',\n            },\n            {\n                Header: 'Phone',\n                accessor: 'Phone',\n            },\n            {\n                Header: 'Birth Date',\n                accessor: 'Birth_Date',\n            },\n            {\n                Header: 'First Donation Date',\n                accessor: 'First_Donation_Date',\n            },\n            {\n                Header: 'Recruitment Source',\n                accessor: 'Recruitment_Source',\n            },\n            {\n                Header: 'Recruitment Reason',\n                accessor: 'Recruitment_Reason',\n            },\n            {\n                Header: 'Number of Donations',\n                accessor: 'Number_of_Donations',\n            },\n            {\n                Header: 'Cumulative Donation Amount',\n                accessor: 'Cumulative_Donation_Amount',\n            },\n            {\n                Header: 'Last Donation Amount',\n                accessor: 'Last_Donation_Amount',\n            },\n            {\n                Header: 'Date of Last Donation',\n                accessor: 'Date_of_Last_Donation',\n            },\n            {\n                Header: 'Preferred Communication',\n                accessor: 'Preferred_Communication',\n            },\n            {\n                Header: 'Date of Last Communication',\n                accessor: 'Date_of_Last_Communication',\n            },\n            {\n                Header: 'Last communication',\n                accessor: 'Last_communication',\n            },\n            {\n                Header: 'SEF POC',\n                accessor: 'SEF_POC',\n            },\n            {\n                Header: 'Notes',\n                accessor: 'Notes',\n            },\n            {\n                Header: 'Email Communication Rate',\n                accessor: 'Email_Communication_Rate',\n            },\n            {\n                Header: '',\n                disableFilters: true,\n                accessor: 'Update_Donor',\n            },\n        ],\n        []\n    )\n\n    const data = newData\n\n    return (\n        <div className=\"Donors\">  \n        <Table columns={columns} data={data} />\n        </div>\n    )\n}\n\nexport default DonorList4;","/home/mittooji/Desktop/Frontend/Team_7_SEF_Frontend/src/components/Transaction/Transaction.jsx",["184","185","186","187"],"import React, { useState, useEffect } from 'react'\nimport { useLocation } from 'react-router-dom'\nimport AddTransaction from './AddTransaction'\nimport EditTransaction from './EditTransaction'\nimport WithoutUser from '../Home/WithoutUser'\n\nexport const Transaction = () => {\n    const location = useLocation()\n    const [user, setUser] = useState(JSON.parse(localStorage.getItem('profile')))\n    const [transaction, setTransaction] = useState(JSON.parse(localStorage.getItem('curr_transaction')))\n    useEffect(() => {\n        const token = user?.token\n        const token2 = transaction?.token\n        setUser(JSON.parse(localStorage.getItem('profile')))\n        setTransaction(JSON.parse(localStorage.getItem('curr_transaction')))\n    }, [location])\n  \n    return (\n        <div className=\"App\">\n          {user ? <TransactionCheck transaction = {transaction} /> : <WithoutUser/>}\n        </div>\n    )\n  }\n\nconst TransactionCheck = (props) => {\n    const [transaction, setTransaction] = useState(JSON.parse(localStorage.getItem('curr_transaction')))\n    useEffect(() => {\n        setTransaction(props.transaction)\n    }, [])\n    return (\n        <div className=\"App\">\n          {transaction ? <EditTransaction transaction={transaction}/> : <AddTransaction/> }\n        </div>\n    )\n}","/home/mittooji/Desktop/Frontend/Team_7_SEF_Frontend/src/components/Transaction Home/WithUserTransaction.js",[],"/home/mittooji/Desktop/Frontend/Team_7_SEF_Frontend/src/components/TransactionList.js",["188"],"import React from \"react\";\nimport { useTable, useFilters, useGlobalFilter, useAsyncDebounce } from 'react-table'\n// import 'bootstrap/dist/css/bootstrap.min.css';\nimport './Donors.css';\n\n\n// Define a default UI for filtering\nfunction GlobalFilter({\n    preGlobalFilteredRows,\n    globalFilter,\n    setGlobalFilter,\n}) {\n    const count = preGlobalFilteredRows.length\n    const [value, setValue] = React.useState(globalFilter)\n    const onChange = useAsyncDebounce(value => {\n        setGlobalFilter(value || undefined)\n    }, 200)\n\n    return (\n        <span>\n            Search:{' '}\n            <input\n                className=\"form-control\"\n                value={value || \"\"}\n                onChange={e => {\n                    setValue(e.target.value);\n                    onChange(e.target.value);\n                }}\n                placeholder={`${count} records...`}\n            />\n        </span>\n    )\n}\n\nfunction DefaultColumnFilter({\n    column: { filterValue, preFilteredRows, setFilter },\n}) {\n    const count = preFilteredRows.length\n\n    return (\n        <input\n            className=\"form-control\"\n            value={filterValue || ''}\n            onChange={e => {\n                setFilter(e.target.value || undefined)\n            }}\n            placeholder={`Search`}\n        />\n    )\n}\n\nfunction Table({ columns, data }) {\n\n    const defaultColumn = React.useMemo(\n        () => ({\n            // Default Filter UI\n            Filter: DefaultColumnFilter,\n        }),\n        []\n    )\n\n    const {\n        getTableProps,\n        getTableBodyProps,\n        headerGroups,\n        rows,\n        prepareRow,\n        state,\n        preGlobalFilteredRows,\n        setGlobalFilter,\n    } = useTable(\n        {\n            columns,\n            data,\n            defaultColumn\n        },\n        useFilters,\n        useGlobalFilter\n    )\n\n    return (\n        <div>\n            <GlobalFilter\n                preGlobalFilteredRows={preGlobalFilteredRows}\n                globalFilter={state.globalFilter}\n                setGlobalFilter={setGlobalFilter}\n            />\n            <br/>\n            <br/>\n            <table className=\"table table-dark\" {...getTableProps()}>\n                <thead>\n                    {headerGroups.map(headerGroup => (\n                        <tr {...headerGroup.getHeaderGroupProps()}>\n                            {headerGroup.headers.map(column => (\n                                <th {...column.getHeaderProps()}>\n                                    {column.render('Header')}\n                                    {/* Render the columns filter UI */}\n                                    <div>{column.canFilter ? column.render('Filter') : null}</div>\n                                </th>\n                            ))}\n                        </tr>\n                    ))}\n                </thead>\n                <tbody {...getTableBodyProps()}>\n                    {rows.map((row, i) => {\n                        prepareRow(row)\n                        return (\n                            <tr {...row.getRowProps()}>\n                                {row.cells.map(cell => {\n                                    return <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\n                                })}\n                            </tr>\n                        )\n                    })}\n                </tbody>\n            </table>\n            <br />\n            <div>Showing the first 20 results of {rows.length} rows</div>\n            {/* <div>\n                <pre className=\"temp\">\n                    <code>{JSON.stringify(state.filters, null, 2)}</code>\n                </pre>\n            </div> */}\n        </div>\n    )\n}\n\nfunction editBtn(props,transaction) {\n\n    const editDonorBtn = (transaction) => {\n        props.editBtn(transaction)\n    }\n\n\n    return <button className = \"btn btn-primary\" onClick  = {() => editDonorBtn(transaction)}>Update</button>\n}\n\n\n\nfunction TransactionList(props) {\n\n    const transactions = props.transactions;\n\n    const newData = [];\n    transactions.forEach(transaction => {\n        newData.push({\n            Poc: transaction.Poc,\n            Donor: transaction.Donor,\n            Amount: transaction.Amount,\n            Currency: transaction.Currency,\n            Date: transaction.Date,\n            Edit_Transaction: editBtn(props,transaction)\n        });\n    });\n\n    const columns = React.useMemo(\n        () => [\n            {\n                Header: 'Poc',\n                accessor: 'Poc',\n            },\n            {\n                Header: 'Donor',\n                accessor: 'Donor',\n            },\n            {\n                Header: 'Amount',\n                accessor: 'Amount',\n            },\n            {\n                Header: 'Currency',\n                accessor: 'Currency',\n            },\n            {\n                Header: 'Date',\n                accessor: 'Date',\n            },\n            {\n                Header: '',\n                disableFilters: true,\n                accessor: 'Edit_Transaction',\n            },\n        ],\n        []\n    )\n\n    const data = newData\n\n    return (\n        <div className=\"Donors\">  \n        <Table columns={columns} data={data} />\n        </div>\n    )\n}\n\nexport default TransactionList;","/home/mittooji/Desktop/Frontend/Team_7_SEF_Frontend/src/components/Transaction/AddTransaction.js",["189","190","191","192","193"],"import React,{useState,useEffect} from 'react';\nimport { useHistory } from 'react-router-dom';\nimport APIService from '../../APIService';\n\nfunction AddTransaction() {\n\n    return (\n        <div className=\"App\">\n            <Form/>\n        </div>\n    )\n}\n\nexport default AddTransaction\n\n\nfunction Form() {\n    const history = useHistory()\n    const [Poc, setPoc] = useState('')\n    const [Donor, setDonor] = useState('')\n    const [Amount, setAmount] = useState('')\n    const [Currency, setCurrency] = useState('')\n    const [Date, setDate] = useState('')\n    // const history = useHistory()\n\n    useEffect(() => {\n        setPoc('')\n        setDonor('')\n        setAmount('')\n        setCurrency('')\n        setDate('')\n    }, [])\n\n    const addTransaction = () => {\n        APIService.AddTransaction({\n            Poc,\n            Donor,\n            Amount,\n            Currency,\n            Date\n        })\n        .then(resp => {\n            if (check(resp)) {\n                alert(\"New Transaction Added\")\n                history.push('/')\n            }\n            else{\n                alert(\"Error in Input\")\n            }\n        }\n        )\n        \n    }\n\n    return (\n        <div className=\"mb-3\">\n            <label htmlFor='Poc' className='form-label'>Poc</label>\n            <input type=\"text\" className='form-control' id='Poc' placeholder = \"Please Enter the Poc\"\n            value={Poc} onChange={e => setPoc(e.target.value)}/>\n\n\n            <label htmlFor='Donor' className='form-label'>Donor</label>\n            <input type=\"text\" className='form-control' id='Donor' placeholder = \"Please Enter the Donor\"\n            value={Donor} onChange={e => setDonor(e.target.value)}/>\n\n\n            <label htmlFor='Amount' className='form-label'>Amount</label>\n            <input type=\"text\" className='form-control' id='Amount' placeholder = \"Please Enter the Amount\"\n            value={Amount} onChange={e => setAmount(e.target.value)}/>\n\n\n            <label htmlFor='Currency' className='form-label'>Currency</label>\n            <input type=\"text\" className='form-control' id='Currency' placeholder = \"Please Enter the Currency\"\n            value={Currency} onChange={e => setCurrency(e.target.value)}/>\n\n\n            <label htmlFor='Date' className='form-label'>Date</label>\n            <input type=\"text\" className='form-control' id='Date' placeholder = \"Please Enter the Date\"\n            value={Date} onChange={e => setDate(e.target.value)}/>\n\n            <br/>\n            <button onClick={addTransaction} className=\"btn btn-success\">Add Transaction</button>\n        </div>\n    )\n}\n\nfunction check(resp){\n    if (resp.Date == \"Date has wrong format. Use one of these formats instead: YYYY-MM-DD.\" || resp.Amount == \"A valid integer is required.\" || resp.Poc == \"This field may not be blank.\" || resp.Donor == \"This field may not be blank.\" || resp.Currency == \"This field may not be blank.\") {\n        return false;\n    }\n    return true;\n}","/home/mittooji/Desktop/Frontend/Team_7_SEF_Frontend/src/components/Transaction/EditTransaction.js",["194","195"],"import React,{useState,useEffect} from 'react';\nimport { useHistory } from 'react-router-dom';\nimport APIService from '../../APIService';\n\nfunction EditTransaction(props) {\n\n    return (\n        <div className=\"App\">\n            <Form transaction = {props.transaction}/>\n        </div>\n    )\n}\n\nexport default EditTransaction\n\n\nfunction Form(props) {\n    const history = useHistory()\n    const [Poc, setPoc] = useState('')\n    const [Donor, setDonor] = useState('')\n    const [Amount, setAmount] = useState('')\n    const [Currency, setCurrency] = useState('')\n    const [Date, setDate] = useState('')\n    console.log(props.transaction)\n\n    // const history = useHistory()\n\n    useEffect(() => {\n        setPoc(props.transaction.Poc)\n        setDonor(props.transaction.Donor)\n        setAmount(props.transaction.Amount)\n        setCurrency(props.transaction.Currency)\n        setDate(props.transaction.Date)\n    }, [props.transaction])\n\n    const updateTransaction = () => {\n        APIService.UpdateTransaction(props.transaction.id, {\n            Poc,\n            Donor,\n            Amount,\n            Currency,\n            Date\n        })\n        alert(\"Transaction Entry Updated\");\n        history.push('/');\n    }\n\n    const deleteBtn = () => {\n        var transaction_check = prompt(\"Please enter the POC of the Donor:\", props.transaction.Poc);\n        if (transaction_check == null || transaction_check !=props.transaction.Poc || transaction_check == \"\") {\n            alert(\"Try Again, Transaction Name miss match\")\n        } \n        else {\n            APIService.DeleteTransaction(props.transaction.id)\n            .catch(error => console.log(error))\n            alert(\"Transaction Entry Deleted\");\n            history.push('/');\n        }\n        }\n\n    return (\n        <div className=\"mb-3\">\n            <label htmlFor='Poc' className='form-label'>Poc</label>\n            <input type=\"text\" className='form-control' id='Poc' placeholder = \"Please Enter the Poc\"\n            value={Poc} onChange={e => setPoc(e.target.value)}/>\n\n\n            <label htmlFor='Donor' className='form-label'>Donor</label>\n            <input type=\"text\" className='form-control' id='Donor' placeholder = \"Please Enter the Donor\"\n            value={Donor} onChange={e => setDonor(e.target.value)}/>\n\n\n            <label htmlFor='Amount' className='form-label'>Amount</label>\n            <input type=\"text\" className='form-control' id='Amount' placeholder = \"Please Enter the Amount\"\n            value={Amount} onChange={e => setAmount(e.target.value)}/>\n\n\n            <label htmlFor='Currency' className='form-label'>Currency</label>\n            <input type=\"text\" className='form-control' id='Currency' placeholder = \"Please Enter the Currency\"\n            value={Currency} onChange={e => setCurrency(e.target.value)}/>\n\n\n            <label htmlFor='Date' className='form-label'>Date</label>\n            <input type=\"text\" className='form-control' id='Date' placeholder = \"Please Enter the Date\"\n            value={Date} onChange={e => setDate(e.target.value)}/>\n\n            <br/>\n\n            <div className = \"row\">   \n                <button onClick={updateTransaction} className=\"btn btn-success\">Update Transaction</button>\n            <div className = \"col\">\n                <br/>\n            </div>\n                <button onClick = {deleteBtn} className = \"btn btn-danger\">Delete</button>\n          </div>\n        </div>\n    )\n}",{"ruleId":"196","replacedBy":"197"},{"ruleId":"198","replacedBy":"199"},{"ruleId":"200","severity":1,"message":"201","line":13,"column":11,"nodeType":"202","messageId":"203","endLine":13,"endColumn":16},{"ruleId":"204","severity":1,"message":"205","line":18,"column":6,"nodeType":"206","endLine":18,"endColumn":16,"suggestions":"207"},{"ruleId":"208","severity":1,"message":"209","line":38,"column":23,"nodeType":"210","messageId":"211","endLine":38,"endColumn":25},{"ruleId":"208","severity":1,"message":"209","line":47,"column":19,"nodeType":"210","messageId":"211","endLine":47,"endColumn":21},{"ruleId":"200","severity":1,"message":"212","line":2,"column":33,"nodeType":"202","messageId":"203","endLine":2,"endColumn":37},{"ruleId":"200","severity":1,"message":"213","line":2,"column":39,"nodeType":"202","messageId":"203","endLine":2,"endColumn":49},{"ruleId":"200","severity":1,"message":"214","line":19,"column":22,"nodeType":"202","messageId":"203","endLine":19,"endColumn":33},{"ruleId":"200","severity":1,"message":"215","line":20,"column":18,"nodeType":"202","messageId":"203","endLine":20,"endColumn":25},{"ruleId":"200","severity":1,"message":"216","line":4,"column":8,"nodeType":"202","messageId":"203","endLine":4,"endColumn":16},{"ruleId":"200","severity":1,"message":"201","line":27,"column":15,"nodeType":"202","messageId":"203","endLine":27,"endColumn":20},{"ruleId":"204","severity":1,"message":"217","line":30,"column":8,"nodeType":"206","endLine":30,"endColumn":18,"suggestions":"218"},{"ruleId":"200","severity":1,"message":"219","line":2,"column":8,"nodeType":"202","messageId":"203","endLine":2,"endColumn":18},{"ruleId":"200","severity":1,"message":"220","line":27,"column":25,"nodeType":"202","messageId":"203","endLine":27,"endColumn":35},{"ruleId":"200","severity":1,"message":"221","line":30,"column":25,"nodeType":"202","messageId":"203","endLine":30,"endColumn":43},{"ruleId":"200","severity":1,"message":"222","line":32,"column":25,"nodeType":"202","messageId":"203","endLine":32,"endColumn":51},{"ruleId":"200","severity":1,"message":"223","line":34,"column":25,"nodeType":"202","messageId":"203","endLine":34,"endColumn":46},{"ruleId":"200","severity":1,"message":"224","line":35,"column":25,"nodeType":"202","messageId":"203","endLine":35,"endColumn":48},{"ruleId":"200","severity":1,"message":"225","line":36,"column":25,"nodeType":"202","messageId":"203","endLine":36,"endColumn":51},{"ruleId":"200","severity":1,"message":"226","line":37,"column":25,"nodeType":"202","messageId":"203","endLine":37,"endColumn":43},{"ruleId":"200","severity":1,"message":"227","line":39,"column":25,"nodeType":"202","messageId":"203","endLine":39,"endColumn":30},{"ruleId":"200","severity":1,"message":"228","line":40,"column":25,"nodeType":"202","messageId":"203","endLine":40,"endColumn":49},{"ruleId":"200","severity":1,"message":"229","line":2,"column":8,"nodeType":"202","messageId":"203","endLine":2,"endColumn":17},{"ruleId":"200","severity":1,"message":"230","line":3,"column":8,"nodeType":"202","messageId":"203","endLine":3,"endColumn":18},{"ruleId":"200","severity":1,"message":"201","line":12,"column":15,"nodeType":"202","messageId":"203","endLine":12,"endColumn":20},{"ruleId":"200","severity":1,"message":"231","line":13,"column":15,"nodeType":"202","messageId":"203","endLine":13,"endColumn":21},{"ruleId":"204","severity":1,"message":"232","line":16,"column":8,"nodeType":"206","endLine":16,"endColumn":18,"suggestions":"233"},{"ruleId":"204","severity":1,"message":"234","line":29,"column":8,"nodeType":"206","endLine":29,"endColumn":10,"suggestions":"235"},{"ruleId":"208","severity":1,"message":"209","line":208,"column":25,"nodeType":"210","messageId":"211","endLine":208,"endColumn":27},{"ruleId":"208","severity":1,"message":"209","line":208,"column":134,"nodeType":"210","messageId":"211","endLine":208,"endColumn":136},{"ruleId":"208","severity":1,"message":"209","line":208,"column":192,"nodeType":"210","messageId":"211","endLine":208,"endColumn":194},{"ruleId":"208","severity":1,"message":"209","line":208,"column":261,"nodeType":"210","messageId":"211","endLine":208,"endColumn":263},{"ruleId":"208","severity":1,"message":"209","line":208,"column":365,"nodeType":"210","messageId":"211","endLine":208,"endColumn":367},{"ruleId":"208","severity":1,"message":"209","line":208,"column":453,"nodeType":"210","messageId":"211","endLine":208,"endColumn":455},{"ruleId":"208","severity":1,"message":"209","line":208,"column":520,"nodeType":"210","messageId":"211","endLine":208,"endColumn":522},{"ruleId":"208","severity":1,"message":"209","line":208,"column":574,"nodeType":"210","messageId":"211","endLine":208,"endColumn":576},{"ruleId":"208","severity":1,"message":"209","line":208,"column":636,"nodeType":"210","messageId":"211","endLine":208,"endColumn":638},{"ruleId":"208","severity":1,"message":"209","line":208,"column":729,"nodeType":"210","messageId":"211","endLine":208,"endColumn":731},{"ruleId":"208","severity":1,"message":"209","line":208,"column":792,"nodeType":"210","messageId":"211","endLine":208,"endColumn":794},{"ruleId":"208","severity":1,"message":"209","line":208,"column":853,"nodeType":"210","messageId":"211","endLine":208,"endColumn":855},{"ruleId":"208","severity":1,"message":"209","line":208,"column":901,"nodeType":"210","messageId":"211","endLine":208,"endColumn":903},{"ruleId":"208","severity":1,"message":"209","line":208,"column":963,"nodeType":"210","messageId":"211","endLine":208,"endColumn":965},{"ruleId":"208","severity":1,"message":"209","line":208,"column":1011,"nodeType":"210","messageId":"211","endLine":208,"endColumn":1013},{"ruleId":"208","severity":1,"message":"209","line":208,"column":1077,"nodeType":"210","messageId":"211","endLine":208,"endColumn":1079},{"ruleId":"208","severity":1,"message":"209","line":208,"column":1138,"nodeType":"210","messageId":"211","endLine":208,"endColumn":1140},{"ruleId":"208","severity":1,"message":"209","line":208,"column":1199,"nodeType":"210","messageId":"211","endLine":208,"endColumn":1201},{"ruleId":"208","severity":1,"message":"209","line":208,"column":1249,"nodeType":"210","messageId":"211","endLine":208,"endColumn":1251},{"ruleId":"208","severity":1,"message":"209","line":208,"column":1297,"nodeType":"210","messageId":"211","endLine":208,"endColumn":1299},{"ruleId":"208","severity":1,"message":"236","line":127,"column":48,"nodeType":"210","messageId":"211","endLine":127,"endColumn":50},{"ruleId":"208","severity":1,"message":"209","line":127,"column":88,"nodeType":"210","messageId":"211","endLine":127,"endColumn":90},{"ruleId":"200","severity":1,"message":"237","line":38,"column":11,"nodeType":"202","messageId":"203","endLine":38,"endColumn":16},{"ruleId":"200","severity":1,"message":"237","line":38,"column":11,"nodeType":"202","messageId":"203","endLine":38,"endColumn":16},{"ruleId":"200","severity":1,"message":"201","line":12,"column":15,"nodeType":"202","messageId":"203","endLine":12,"endColumn":20},{"ruleId":"200","severity":1,"message":"231","line":13,"column":15,"nodeType":"202","messageId":"203","endLine":13,"endColumn":21},{"ruleId":"204","severity":1,"message":"238","line":16,"column":8,"nodeType":"206","endLine":16,"endColumn":18,"suggestions":"239"},{"ruleId":"204","severity":1,"message":"240","line":29,"column":8,"nodeType":"206","endLine":29,"endColumn":10,"suggestions":"241"},{"ruleId":"200","severity":1,"message":"237","line":38,"column":11,"nodeType":"202","messageId":"203","endLine":38,"endColumn":16},{"ruleId":"208","severity":1,"message":"209","line":88,"column":19,"nodeType":"210","messageId":"211","endLine":88,"endColumn":21},{"ruleId":"208","severity":1,"message":"209","line":88,"column":108,"nodeType":"210","messageId":"211","endLine":88,"endColumn":110},{"ruleId":"208","severity":1,"message":"209","line":88,"column":154,"nodeType":"210","messageId":"211","endLine":88,"endColumn":156},{"ruleId":"208","severity":1,"message":"209","line":88,"column":202,"nodeType":"210","messageId":"211","endLine":88,"endColumn":204},{"ruleId":"208","severity":1,"message":"209","line":88,"column":253,"nodeType":"210","messageId":"211","endLine":88,"endColumn":255},{"ruleId":"208","severity":1,"message":"236","line":50,"column":60,"nodeType":"210","messageId":"211","endLine":50,"endColumn":62},{"ruleId":"208","severity":1,"message":"209","line":50,"column":105,"nodeType":"210","messageId":"211","endLine":50,"endColumn":107},"no-native-reassign",["242"],"no-negated-in-lhs",["243"],"no-unused-vars","'token' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'user?.result.email' and 'user?.token'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setEmail' needs the current value of 'user.result.email'.","ArrayExpression",["244"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'Grid' is defined but never used.","'Typography' is defined but never used.","'setIsSignUp' is assigned a value but never used.","'setForm' is assigned a value but never used.","'MenuIcon' is defined but never used.","React Hook useEffect has a missing dependency: 'user?.token'. Either include it or remove the dependency array.",["245"],"'APIService' is defined but never used.","'Birth_Date' is assigned a value but never used.","'Recruitment_Reason' is assigned a value but never used.","'Cumulative_Donation_Amount' is assigned a value but never used.","'Date_of_Last_Donation' is assigned a value but never used.","'Preferred_Communication' is assigned a value but never used.","'Date_of_Last_Communication' is assigned a value but never used.","'Last_communication' is assigned a value but never used.","'Notes' is assigned a value but never used.","'Email_Communication_Rate' is assigned a value but never used.","'DonorList' is defined but never used.","'DonorList2' is defined but never used.","'token2' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'donor?.token' and 'user?.token'. Either include them or remove the dependency array.",["246"],"React Hook useEffect has a missing dependency: 'props.donor'. Either include it or remove the dependency array. If 'setDonor' needs the current value of 'props.donor', you can also switch to useReducer instead of useState and read 'props.donor' in the reducer.",["247"],"Expected '!==' and instead saw '!='.","'count' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'transaction?.token' and 'user?.token'. Either include them or remove the dependency array.",["248"],"React Hook useEffect has a missing dependency: 'props.transaction'. Either include it or remove the dependency array. If 'setTransaction' needs the current value of 'props.transaction', you can also switch to useReducer instead of useState and read 'props.transaction' in the reducer.",["249"],"no-global-assign","no-unsafe-negation",{"desc":"250","fix":"251"},{"desc":"252","fix":"253"},{"desc":"254","fix":"255"},{"desc":"256","fix":"257"},{"desc":"258","fix":"259"},{"desc":"260","fix":"261"},"Update the dependencies array to be: [location, user?.result.email, user?.token]",{"range":"262","text":"263"},"Update the dependencies array to be: [location, user?.token]",{"range":"264","text":"265"},"Update the dependencies array to be: [donor?.token, location, user?.token]",{"range":"266","text":"267"},"Update the dependencies array to be: [props.donor]",{"range":"268","text":"269"},"Update the dependencies array to be: [location, transaction?.token, user?.token]",{"range":"270","text":"271"},"Update the dependencies array to be: [props.transaction]",{"range":"272","text":"273"},[668,678],"[location, user?.result.email, user?.token]",[1027,1037],"[location, user?.token]",[673,683],"[donor?.token, location, user?.token]",[1002,1004],"[props.donor]",[739,749],"[location, transaction?.token, user?.token]",[1122,1124],"[props.transaction]"]